#!/usr/bin/env python3
"""
Script de prueba para el Sistema H√≠brido Mi Chas-K v3.0.0
"""

import sys
import os
from pathlib import Path

# Agregar directorio actual al path
current_dir = Path(__file__).parent
sys.path.insert(0, str(current_dir))

def test_hybrid_system():
    """Probar el sistema h√≠brido completo"""
    print("üß™ PROBANDO SISTEMA H√çBRIDO MI CHAS-K v3.0.0")
    print("=" * 50)
    
    try:
        # 1. Probar importaci√≥n del sistema h√≠brido
        print("\n1Ô∏è‚É£ Probando importaci√≥n del sistema h√≠brido...")
        from database.connection_hybrid import db_hybrid, execute_query, execute_update
        print("‚úÖ Sistema h√≠brido importado correctamente")
        
        # 2. Verificar estado inicial
        print("\n2Ô∏è‚É£ Verificando estado del sistema...")
        sync_status = db_hybrid.get_sync_status()
        print(f"   üåê Online: {sync_status['online']}")
        print(f"   üóÉÔ∏è BD Remota: {sync_status['database_available']}")
        print(f"   üìä Pendientes: {sync_status['pending']}")
        print(f"   ‚úÖ Completadas: {sync_status['completed']}")
        print(f"   ‚ùå Fallidas: {sync_status['failed']}")
        
        # 3. Probar conexi√≥n local
        print("\n3Ô∏è‚É£ Probando conexi√≥n a base de datos local...")
        with db_hybrid.get_connection(prefer_remote=False) as conn:
            print("‚úÖ Conexi√≥n local establecida")
            print(f"   üìç Tipo: {type(conn).__name__}")
        
        # 4. Probar consultas b√°sicas
        print("\n4Ô∏è‚É£ Probando consultas b√°sicas...")
        
        # Contar productos
        productos = execute_query("SELECT COUNT(*) as total FROM productos")
        print(f"   üì¶ Productos en BD: {productos[0]['total'] if productos else 0}")
        
        # Contar categor√≠as
        categorias = execute_query("SELECT COUNT(*) as total FROM categorias")
        print(f"   üè∑Ô∏è Categor√≠as en BD: {categorias[0]['total'] if categorias else 0}")
        
        # Contar vendedores
        vendedores = execute_query("SELECT COUNT(*) as total FROM vendedores")
        print(f"   üë• Vendedores en BD: {vendedores[0]['total'] if vendedores else 0}")
        
        # Contar ventas
        ventas = execute_query("SELECT COUNT(*) as total FROM ventas")
        print(f"   üí∞ Ventas registradas: {ventas[0]['total'] if ventas else 0}")
        
        # 5. Probar inserci√≥n con sincronizaci√≥n
        print("\n5Ô∏è‚É£ Probando inserci√≥n con cola de sincronizaci√≥n...")
        
        test_data = {
            'table': 'productos',
            'operation': 'INSERT',
            'data': {
                'nombre': 'Producto Test',
                'precio': 10.00,
                'stock': 100,
                'categoria_id': 1,
                'activo': True
            }
        }
        
        result = execute_update("""
            INSERT INTO productos (nombre, precio, stock, categoria_id, activo)
            VALUES (?, ?, ?, ?, ?)
        """, ('Producto Test', 10.00, 100, 1, True), test_data)
        
        if result:
            print(f"‚úÖ Producto test creado con ID: {result}")
            
            # Limpiar producto test
            execute_update("DELETE FROM productos WHERE id = ?", (result,))
            print("üóëÔ∏è Producto test eliminado")
        else:
            print("‚ùå Error creando producto test")
        
        # 6. Verificar m√≥dulos de p√°ginas
        print("\n6Ô∏è‚É£ Verificando m√≥dulos de p√°ginas...")
        
        try:
            from pages.punto_venta_simple import mostrar_punto_venta_simple
            print("‚úÖ M√≥dulo punto_venta_simple importado")
        except ImportError as e:
            print(f"‚ùå Error importando punto_venta_simple: {e}")
        
        try:
            from pages.inventario_simple import mostrar_inventario_simple
            print("‚úÖ M√≥dulo inventario_simple importado")
        except ImportError as e:
            print(f"‚ùå Error importando inventario_simple: {e}")
        
        try:
            from pages.dashboard_simple import mostrar_dashboard_simple
            print("‚úÖ M√≥dulo dashboard_simple importado")
        except ImportError as e:
            print(f"‚ùå Error importando dashboard_simple: {e}")
        
        try:
            from pages.configuracion_simple import mostrar_configuracion_simple
            print("‚úÖ M√≥dulo configuracion_simple importado")
        except ImportError as e:
            print(f"‚ùå Error importando configuracion_simple: {e}")
        
        # 7. Verificar aplicaci√≥n principal
        print("\n7Ô∏è‚É£ Verificando aplicaci√≥n principal...")
        
        if os.path.exists('app_hybrid.py'):
            print("‚úÖ Aplicaci√≥n h√≠brida encontrada: app_hybrid.py")
        else:
            print("‚ùå Aplicaci√≥n h√≠brida no encontrada")
        
        # 8. Estado final
        print("\n8Ô∏è‚É£ Estado final del sistema...")
        final_status = db_hybrid.get_sync_status()
        print(f"   üìä Elementos en cola: {final_status['pending']}")
        
        if final_status['database_available']:
            print("   üåê Sistema listo para uso ONLINE")
        else:
            print("   üíæ Sistema listo para uso OFFLINE")
        
        print("\n" + "=" * 50)
        print("üéâ TODAS LAS PRUEBAS COMPLETADAS EXITOSAMENTE")
        print("=" * 50)
        
        print("\nüìã PR√ìXIMOS PASOS:")
        print("1. Configurar variables de entorno en .env")
        print("2. Ejecutar: streamlit run app_hybrid.py")
        print("3. Abrir navegador en: http://localhost:8501")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå ERROR EN LAS PRUEBAS: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_connectivity():
    """Probar conectividad espec√≠fica"""
    print("\nüîç PRUEBA DE CONECTIVIDAD")
    print("-" * 30)
    
    try:
        from database.connection_hybrid import db_hybrid
        
        # Probar internet
        internet = db_hybrid.check_internet_connection()
        print(f"üåê Internet: {'‚úÖ Disponible' if internet else '‚ùå No disponible'}")
        
        # Probar BD remota
        if internet:
            remote_db = db_hybrid.check_database_connection()
            print(f"üóÉÔ∏è BD Remota: {'‚úÖ Conectada' if remote_db else '‚ùå No conectada'}")
        else:
            print("üóÉÔ∏è BD Remota: ‚è≠Ô∏è Omitida (sin internet)")
        
        # Probar BD local
        local_db_exists = os.path.exists(db_hybrid.local_db_path)
        print(f"üíæ BD Local: {'‚úÖ Disponible' if local_db_exists else '‚ùå No encontrada'}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error en prueba de conectividad: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ INICIANDO PRUEBAS DEL SISTEMA H√çBRIDO")
    print("=" * 50)
    
    # Verificar conectividad primero
    connectivity_ok = test_connectivity()
    
    # Luego probar sistema completo
    if connectivity_ok:
        system_ok = test_hybrid_system()
        
        if system_ok:
            print("\n‚úÖ SISTEMA LISTO PARA PRODUCCI√ìN")
            sys.exit(0)
        else:
            print("\n‚ùå SISTEMA TIENE PROBLEMAS")
            sys.exit(1)
    else:
        print("\n‚ö†Ô∏è PROBLEMAS DE CONECTIVIDAD DETECTADOS")
        print("El sistema puede funcionar en modo offline")
        sys.exit(0)
