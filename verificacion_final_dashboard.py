#!/usr/bin/env python3
"""
Verificaci√≥n final del dashboard mejorado
Valida que todas las funciones cr√≠ticas est√©n presentes y funcionando
"""

import sys
import os
from datetime import datetime

print("üîç VERIFICACI√ìN FINAL DEL DASHBOARD MEJORADO")
print("=" * 50)

# Verificar sintaxis de archivos cr√≠ticos
archivos_criticos = [
    'pages/dashboard.py',
    'utils/pdf_generator.py',
    'utils/timezone_utils.py',
    'database/models.py'
]

print("\n1. üß™ VERIFICACI√ìN DE SINTAXIS")
print("-" * 30)
for archivo in archivos_criticos:
    try:
        if os.path.exists(archivo):
            with open(archivo, 'r', encoding='utf-8') as f:
                compile(f.read(), archivo, 'exec')
            print(f"‚úÖ {archivo}: SINTAXIS OK")
        else:
            print(f"‚ùå {archivo}: ARCHIVO NO ENCONTRADO")
    except SyntaxError as e:
        print(f"‚ùå {archivo}: ERROR DE SINTAXIS - {e}")
    except Exception as e:
        print(f"‚ö†Ô∏è {archivo}: ADVERTENCIA - {e}")

# Verificar funciones cr√≠ticas en dashboard
print("\n2. üîß VERIFICACI√ìN DE FUNCIONES CR√çTICAS")
print("-" * 40)

try:
    with open('pages/dashboard.py', 'r', encoding='utf-8') as f:
        contenido = f.read()
    
    funciones_criticas = [
        'mostrar_dashboard',
        'mostrar_comparacion_detallada',
        'mostrar_corte_caja',
        'generar_reporte_diario',
        'mostrar_historial_cortes'
    ]
    
    for funcion in funciones_criticas:
        if f"def {funcion}" in contenido:
            print(f"‚úÖ Funci√≥n {funcion}: PRESENTE")
        else:
            print(f"‚ùå Funci√≥n {funcion}: FALTANTE")
    
    # Verificar elementos espec√≠ficos de la comparaci√≥n
    elementos_comparacion = [
        'SISTEMA/APP',
        'CAJA F√çSICA',
        'COMPARACI√ìN DETALLADA',
        'An√°lisis de diferencias',
        'Tabla Resumen Comparativa'
    ]
    
    print(f"\n   üìä Elementos de comparaci√≥n:")
    for elemento in elementos_comparacion:
        if elemento in contenido:
            print(f"   ‚úÖ {elemento}: PRESENTE")
        else:
            print(f"   ‚ùå {elemento}: FALTANTE")

except Exception as e:
    print(f"‚ùå Error al verificar dashboard: {e}")

# Verificar generador de PDF
print("\n3. üìÑ VERIFICACI√ìN GENERADOR PDF")
print("-" * 35)

try:
    with open('utils/pdf_generator.py', 'r', encoding='utf-8') as f:
        contenido_pdf = f.read()
    
    if 'class ReporteGenerator' in contenido_pdf:
        print("‚úÖ Clase ReporteGenerator: PRESENTE")
        if 'generar_reporte_diario' in contenido_pdf:
            print("‚úÖ M√©todo generar_reporte_diario: PRESENTE")
        else:
            print("‚ùå M√©todo generar_reporte_diario: FALTANTE")
    else:
        print("‚ùå Clase ReporteGenerator: FALTANTE")

except Exception as e:
    print(f"‚ùå Error al verificar PDF generator: {e}")

# Verificar timezone utils
print("\n4. üåç VERIFICACI√ìN ZONA HORARIA")
print("-" * 35)

try:
    with open('utils/timezone_utils.py', 'r', encoding='utf-8') as f:
        contenido_tz = f.read()
    
    funciones_tz = [
        'get_mexico_datetime',
        'get_mexico_date_str',
        'convert_to_mexico_tz'
    ]
    
    for funcion in funciones_tz:
        if f"def {funcion}" in contenido_tz:
            print(f"‚úÖ {funcion}: PRESENTE")
        else:
            print(f"‚ùå {funcion}: FALTANTE")

except Exception as e:
    print(f"‚ùå Error al verificar timezone utils: {e}")

# Verificar requirements.txt
print("\n5. üì¶ VERIFICACI√ìN DEPENDENCIAS")
print("-" * 35)

try:
    with open('requirements.txt', 'r', encoding='utf-8') as f:
        requirements = f.read()
    
    dependencias_criticas = [
        'streamlit',
        'pandas',
        'plotly',
        'reportlab',
        'pytz'
    ]
    
    for dep in dependencias_criticas:
        if dep in requirements:
            print(f"‚úÖ {dep}: PRESENTE")
        else:
            print(f"‚ùå {dep}: FALTANTE")

except Exception as e:
    print(f"‚ùå Error al verificar requirements: {e}")

print("\n" + "=" * 50)
print("üéØ VERIFICACI√ìN COMPLETADA")
print(f"‚è∞ Fecha: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
print("üöÄ Sistema listo para producci√≥n")
print("=" * 50)
