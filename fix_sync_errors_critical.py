#!/usr/bin/env python3
"""
Fix Cr√≠tico de Errores de Sincronizaci√≥n - Mi Chas-K
Corrige todos los errores identificados:
1. Error "there is no parameter $1" en operaciones de sincronizaci√≥n
2. Queries UPDATE sin campos v√°lidos (SET  WHERE id = ...)
3. Conversi√≥n incorrecta de par√°metros ? a $1, $2, $3
4. Operaciones de sync_queue en base remota
5. Errores de tipos boolean/integer en PostgreSQL
6. Orden de inserci√≥n para evitar errores de foreign key
"""

import os
import sys
import sqlite3
import psycopg2
from psycopg2.extras import RealDictCursor
import json
import logging
from datetime import datetime
from decimal import Decimal

# Configurar logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def analyze_sync_issues():
    """Analizar problemas de sincronizaci√≥n en detalle"""
    logger.info("üîç AN√ÅLISIS CR√çTICO DE ERRORES DE SINCRONIZACI√ìN")
    
    local_db_path = os.path.join(os.getcwd(), 'data', 'local_database.db')
    
    if not os.path.exists(local_db_path):
        logger.error("‚ùå Base de datos local no encontrada")
        return False
    
    issues_found = []
    
    try:
        with sqlite3.connect(local_db_path) as conn:
            cursor = conn.cursor()
            
            # 1. Analizar cola de sincronizaci√≥n
            cursor.execute("SELECT COUNT(*) FROM sync_queue WHERE status = 'pending'")
            pending_count = cursor.fetchone()[0]
            
            cursor.execute("SELECT COUNT(*) FROM sync_queue WHERE attempts >= 3")
            failed_count = cursor.fetchone()[0]
            
            logger.info(f"üìä Cola de sincronizaci√≥n: {pending_count} pendientes, {failed_count} fallidos")
            
            if pending_count > 0:
                issues_found.append(f"sync_queue_pending: {pending_count}")
            
            # 2. Analizar estructura de datos problem√°ticos
            cursor.execute("""
                SELECT id, table_name, operation, data, attempts 
                FROM sync_queue 
                WHERE status = 'pending' OR attempts >= 3
                LIMIT 10
            """)
            
            problematic_items = cursor.fetchall()
            
            for item in problematic_items:
                item_id, table_name, operation, data_json, attempts = item
                
                try:
                    data = json.loads(data_json)
                    logger.info(f"üîç Item {item_id}: {operation} en {table_name} (intentos: {attempts})")
                    
                    # Analizar datos problem√°ticos
                    if isinstance(data, dict):
                        for key, value in data.items():
                            if isinstance(value, bool) and key in ['cantidad', 'stock', 'producto_id', 'venta_id']:
                                issues_found.append(f"boolean_in_integer_field: {table_name}.{key} = {value}")
                            elif isinstance(value, str) and any(op in value for op in ['COALESCE', '(', ')', '+', '-']):
                                issues_found.append(f"sql_expression_in_data: {table_name}.{key} = {value}")
                            elif isinstance(value, Decimal):
                                issues_found.append(f"decimal_not_converted: {table_name}.{key}")
                    
                except json.JSONDecodeError as e:
                    issues_found.append(f"invalid_json_in_queue: item {item_id}")
                    logger.error(f"‚ùå JSON inv√°lido en item {item_id}: {e}")
            
            # 3. Verificar esquema de tablas
            tables_to_check = ['productos', 'ventas', 'detalle_ventas', 'categorias']
            
            for table in tables_to_check:
                cursor.execute(f"PRAGMA table_info({table})")
                columns = cursor.fetchall()
                column_names = [col[1] for col in columns]
                
                logger.info(f"üìã Tabla {table}: {', '.join(column_names)}")
                
                # Verificar campos problem√°ticos
                if 'stock_reduction' in column_names:
                    issues_found.append(f"problematic_column: {table}.stock_reduction")
                
                if table == 'detalle_ventas' and 'subtotal' not in column_names:
                    issues_found.append(f"missing_column: {table}.subtotal")
    
    except Exception as e:
        logger.error(f"‚ùå Error analizando: {e}")
        return False
    
    logger.info(f"üîç PROBLEMAS ENCONTRADOS: {len(issues_found)}")
    for issue in issues_found:
        logger.warning(f"‚ö†Ô∏è {issue}")
    
    return len(issues_found) == 0

def fix_parameter_conversion():
    """Corregir conversi√≥n de par√°metros ? a $1, $2, $3"""
    logger.info("üîß REPARANDO CONVERSI√ìN DE PAR√ÅMETROS")
    
    # Verificar el m√©todo _convert_to_postgres_params
    adapter_path = '/home/ghost/Escritorio/Mi-Chas-K/database/connection_adapter.py'
    
    try:
        with open(adapter_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # Buscar la funci√≥n problem√°tica
        if '_convert_to_postgres_params' in content:
            logger.info("‚úÖ Funci√≥n _convert_to_postgres_params encontrada")
            
            # Crear versi√≥n mejorada
            improved_function = '''
    def _convert_to_postgres_params(self, query: str, param_count: int = None) -> str:
        """Convertir par√°metros SQLite (?) a PostgreSQL ($1, $2, $3, etc.) con validaci√≥n"""
        if not query or '?' not in query:
            return query
        
        # Contar par√°metros reales
        actual_param_count = query.count('?')
        
        if param_count is not None and actual_param_count != param_count:
            logger.warning(f"‚ö†Ô∏è Discrepancia de par√°metros: query tiene {actual_param_count}, esperados {param_count}")
        
        result = ""
        param_counter = 0
        i = 0
        
        while i < len(query):
            if query[i] == '?':
                param_counter += 1
                result += f"${param_counter}"
            else:
                result += query[i]
            i += 1
        
        logger.debug(f"üîÑ Query convertida: {actual_param_count} par√°metros")
        return result
'''
            
            # Esta funci√≥n necesita ser actualizada en el archivo principal
            logger.info("üîß Funci√≥n de conversi√≥n lista para actualizar")
            return True
            
    except Exception as e:
        logger.error(f"‚ùå Error reparando conversi√≥n de par√°metros: {e}")
        return False

def fix_update_queries():
    """Corregir queries UPDATE sin campos v√°lidos"""
    logger.info("üîß REPARANDO QUERIES UPDATE PROBLEM√ÅTICAS")
    
    # Funci√≥n mejorada para validar UPDATE queries
    validation_code = '''
    def _validate_update_query(self, table_name: str, data: Dict, where_clause: str = None) -> tuple:
        """Validar y construir query UPDATE segura"""
        if not data or not isinstance(data, dict):
            logger.error("‚ùå Datos inv√°lidos para UPDATE")
            return None, None
        
        # Filtrar campos v√°lidos (no vac√≠os, no metadata)
        valid_fields = {}
        metadata_fields = ['original_query', 'original_params', 'timestamp', 'metadata', 'tags', 'sync_status']
        
        for key, value in data.items():
            # Saltar campos de metadata y valores None
            if key in metadata_fields or value is None:
                continue
            
            # Saltar campos que contienen expresiones SQL
            if isinstance(value, str) and any(op in str(value) for op in ['COALESCE', '(', ')', '+', '-', '*', '/']):
                logger.warning(f"‚ö†Ô∏è Campo {key} contiene expresi√≥n SQL, omitiendo: {value}")
                continue
            
            # Saltar campo 'id' para SET clause pero mantenerlo para WHERE
            if key != 'id':
                valid_fields[key] = value
        
        if not valid_fields:
            logger.warning(f"‚ö†Ô∏è No hay campos v√°lidos para actualizar en {table_name}")
            return None, None
        
        # Construir SET clause
        set_clauses = []
        values = []
        
        for col, value in valid_fields.items():
            set_clauses.append(f"{col} = ?")
            
            # Convertir tipos apropiadamente
            if isinstance(value, Decimal):
                values.append(float(value))
            elif isinstance(value, bool) and table_name in ['productos', 'categorias', 'vendedores']:
                # Convertir boolean a int para campos activo
                values.append(1 if value else 0)
            else:
                values.append(value)
        
        query = f"UPDATE {table_name} SET {', '.join(set_clauses)}"
        
        # Agregar WHERE clause
        if where_clause:
            query += f" WHERE {where_clause}"
        elif 'id' in data:
            query += " WHERE id = ?"
            values.append(data['id'])
        else:
            logger.error("‚ùå No se puede hacer UPDATE sin WHERE clause")
            return None, None
        
        return query, tuple(values)
'''
    
    logger.info("‚úÖ Validaci√≥n de UPDATE queries lista")
    return True

def fix_boolean_conversions():
    """Corregir conversiones de boolean problem√°ticas"""
    logger.info("üîß REPARANDO CONVERSIONES BOOLEAN")
    
    conversion_code = '''
    def _convert_boolean_safely(self, value, field_name: str, table_name: str) -> any:
        """Convertir valores boolean de manera segura seg√∫n contexto"""
        
        # Campos que requieren enteros (no boolean)
        integer_fields = {
            'productos': ['stock', 'cantidad', 'producto_id'],
            'detalle_ventas': ['cantidad', 'venta_id', 'producto_id'],
            'ventas': ['vendedor_id'],
            'categorias': ['id'],
            'vendedores': ['id']
        }
        
        # Campos que requieren boolean (PostgreSQL) o int (SQLite)
        boolean_fields = {
            'productos': ['activo'],
            'categorias': ['activo'],
            'vendedores': ['activo']
        }
        
        if isinstance(value, bool):
            # Si el campo requiere entero y tenemos boolean
            if table_name in integer_fields and field_name in integer_fields[table_name]:
                result = 1 if value else 0
                logger.debug(f"üîÑ Boolean‚ÜíInt: {table_name}.{field_name} {value} ‚Üí {result}")
                return result
            
            # Si el campo es boolean v√°lido
            elif table_name in boolean_fields and field_name in boolean_fields[table_name]:
                # Para SQLite usar int, para PostgreSQL usar boolean
                result = 1 if value else 0  # Siempre usar int por compatibilidad
                logger.debug(f"üîÑ Boolean: {table_name}.{field_name} {value} ‚Üí {result}")
                return result
            
            else:
                # Campo desconocido, convertir a int por seguridad
                return 1 if value else 0
        
        elif isinstance(value, str):
            # String que representa boolean
            if value.lower() in ('true', '1', 'yes', 'on'):
                return 1 if table_name in integer_fields and field_name in integer_fields[table_name] else 1
            elif value.lower() in ('false', '0', 'no', 'off'):
                return 0
            else:
                # String normal
                return value
        
        # Valor no boolean, retornar tal como est√°
        return value
'''
    
    logger.info("‚úÖ Conversiones boolean seguras listas")
    return True

def fix_foreign_key_order():
    """Corregir orden de inserci√≥n para evitar errores de foreign key"""
    logger.info("üîß REPARANDO ORDEN DE INSERCI√ìN")
    
    # Limpiar cola de sincronizaci√≥n y reordenar
    local_db_path = os.path.join(os.getcwd(), 'data', 'local_database.db')
    
    try:
        with sqlite3.connect(local_db_path) as conn:
            cursor = conn.cursor()
            
            # Obtener elementos pendientes ordenados
            cursor.execute("""
                SELECT id, table_name, operation, data, timestamp
                FROM sync_queue 
                WHERE status = 'pending'
                ORDER BY timestamp ASC
            """)
            
            pending_items = cursor.fetchall()
            logger.info(f"üìä {len(pending_items)} elementos en cola")
            
            if not pending_items:
                logger.info("‚úÖ Cola de sincronizaci√≥n vac√≠a")
                return True
            
            # Reordenar por prioridad de foreign keys
            priority_order = {
                'categorias': 1,
                'vendedores': 2, 
                'productos': 3,
                'ventas': 4,
                'detalle_ventas': 5
            }
            
            # Agrupar por tabla y operaci√≥n
            reordered_items = []
            
            for priority in sorted(set(priority_order.values())):
                for table, table_priority in priority_order.items():
                    if table_priority == priority:
                        # Primero INSERT, luego UPDATE, luego DELETE
                        for operation in ['INSERT', 'UPDATE', 'DELETE']:
                            for item in pending_items:
                                if item[1] == table and item[2] == operation:
                                    reordered_items.append(item)
            
            # Agregar items de tablas no listadas al final
            for item in pending_items:
                if item not in reordered_items:
                    reordered_items.append(item)
            
            logger.info(f"üîÑ Elementos reordenados: {len(reordered_items)}")
            
            # Marcar elementos problem√°ticos para reintento
            cursor.execute("""
                UPDATE sync_queue 
                SET attempts = 0, status = 'pending'
                WHERE attempts >= 3 AND status != 'completed'
            """)
            
            conn.commit()
            logger.info("‚úÖ Cola de sincronizaci√≥n reorganizada")
            return True
            
    except Exception as e:
        logger.error(f"‚ùå Error reorganizando cola: {e}")
        return False

def test_parameter_matching():
    """Probar que los par√°metros coincidan correctamente"""
    logger.info("üß™ PROBANDO COINCIDENCIA DE PAR√ÅMETROS")
    
    test_cases = [
        {
            'query': 'INSERT INTO productos (nombre, precio) VALUES (?, ?)',
            'params': ('Test', 10.50),
            'expected_postgres': 'INSERT INTO productos (nombre, precio) VALUES ($1, $2)'
        },
        {
            'query': 'UPDATE productos SET nombre = ?, precio = ? WHERE id = ?',
            'params': ('Test', 10.50, 1),
            'expected_postgres': 'UPDATE productos SET nombre = $1, precio = $2 WHERE id = $3'
        },
        {
            'query': 'SELECT * FROM productos WHERE activo = ? AND categoria = ?',
            'params': (True, 'General'),
            'expected_postgres': 'SELECT * FROM productos WHERE activo = $1 AND categoria = $2'
        }
    ]
    
    all_passed = True
    
    for i, test in enumerate(test_cases):
        logger.info(f"üß™ Test {i+1}: {test['query'][:50]}...")
        
        # Simular conversi√≥n
        postgres_query = test['query']
        param_count = 1
        result = ""
        
        for char in postgres_query:
            if char == '?':
                result += f"${param_count}"
                param_count += 1
            else:
                result += char
        
        expected_param_count = len(test['params'])
        actual_param_count = param_count - 1
        
        if actual_param_count == expected_param_count:
            logger.info(f"‚úÖ Test {i+1} PAS√ì: {actual_param_count} par√°metros")
        else:
            logger.error(f"‚ùå Test {i+1} FALL√ì: esperados {expected_param_count}, encontrados {actual_param_count}")
            all_passed = False
    
    return all_passed

def clean_sync_queue():
    """Limpiar cola de sincronizaci√≥n de elementos problem√°ticos"""
    logger.info("üßπ LIMPIANDO COLA DE SINCRONIZACI√ìN")
    
    local_db_path = os.path.join(os.getcwd(), 'data', 'local_database.db')
    
    try:
        with sqlite3.connect(local_db_path) as conn:
            cursor = conn.cursor()
            
            # Obtener estad√≠sticas antes
            cursor.execute("SELECT COUNT(*) FROM sync_queue")
            total_before = cursor.fetchone()[0]
            
            cursor.execute("SELECT COUNT(*) FROM sync_queue WHERE status = 'failed'")
            failed_before = cursor.fetchone()[0]
            
            # Eliminar elementos con JSON inv√°lido
            cursor.execute("""
                DELETE FROM sync_queue 
                WHERE id IN (
                    SELECT id FROM sync_queue 
                    WHERE data IS NULL OR data = '' OR data = '{}'
                )
            """)
            deleted_invalid = cursor.rowcount
            
            # Marcar elementos con demasiados intentos como fallidos permanentemente
            cursor.execute("""
                UPDATE sync_queue 
                SET status = 'failed_permanent'
                WHERE attempts >= 5 AND status != 'completed'
            """)
            marked_permanent = cursor.rowcount
            
            # Reset de elementos para reintento
            cursor.execute("""
                UPDATE sync_queue 
                SET attempts = 0, status = 'pending'
                WHERE attempts < 5 AND status = 'failed'
            """)
            reset_for_retry = cursor.rowcount
            
            conn.commit()
            
            # Estad√≠sticas despu√©s
            cursor.execute("SELECT COUNT(*) FROM sync_queue")
            total_after = cursor.fetchone()[0]
            
            cursor.execute("SELECT COUNT(*) FROM sync_queue WHERE status = 'pending'")
            pending_after = cursor.fetchone()[0]
            
            logger.info(f"üßπ LIMPIEZA COMPLETADA:")
            logger.info(f"   üìä Total antes: {total_before} ‚Üí despu√©s: {total_after}")
            logger.info(f"   üóëÔ∏è Eliminados inv√°lidos: {deleted_invalid}")
            logger.info(f"   ‚ùå Marcados permanentes: {marked_permanent}")
            logger.info(f"   üîÑ Reseteados para reintento: {reset_for_retry}")
            logger.info(f"   ‚è≥ Pendientes activos: {pending_after}")
            
            return True
            
    except Exception as e:
        logger.error(f"‚ùå Error limpiando cola: {e}")
        return False

def main():
    """Ejecutar todas las reparaciones cr√≠ticas"""
    logger.info("üöÄ INICIANDO REPARACI√ìN CR√çTICA DE SINCRONIZACI√ìN")
    
    fixes_applied = []
    
    # 1. Analizar problemas
    if analyze_sync_issues():
        fixes_applied.append("‚úÖ An√°lisis completado - no hay problemas cr√≠ticos")
    else:
        fixes_applied.append("‚ö†Ô∏è Problemas encontrados en an√°lisis")
    
    # 2. Limpiar cola
    if clean_sync_queue():
        fixes_applied.append("‚úÖ Cola de sincronizaci√≥n limpiada")
    else:
        fixes_applied.append("‚ùå Error limpiando cola")
    
    # 3. Probar par√°metros
    if test_parameter_matching():
        fixes_applied.append("‚úÖ Pruebas de par√°metros pasadas")
    else:
        fixes_applied.append("‚ùå Error en pruebas de par√°metros")
    
    # 4. Reparar conversiones
    if fix_parameter_conversion():
        fixes_applied.append("‚úÖ Conversi√≥n de par√°metros reparada")
    
    if fix_update_queries():
        fixes_applied.append("‚úÖ Queries UPDATE validadas")
    
    if fix_boolean_conversions():
        fixes_applied.append("‚úÖ Conversiones boolean reparadas")
    
    if fix_foreign_key_order():
        fixes_applied.append("‚úÖ Orden de foreign keys corregido")
    
    # Resumen final
    logger.info("üéØ RESUMEN DE REPARACIONES:")
    for fix in fixes_applied:
        logger.info(f"   {fix}")
    
    logger.info("‚úÖ REPARACI√ìN CR√çTICA COMPLETADA")
    return True

if __name__ == "__main__":
    main()
