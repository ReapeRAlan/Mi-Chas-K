#!/bin/bash

# Script para desarrollo local de Mi Chas-K
# Facilita el testing y desarrollo antes de subir a producci√≥n

set -e

# Colores
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

print_message() {
    echo -e "${2}${1}${NC}"
}

print_message "üõ†Ô∏è  Mi Chas-K - Herramientas de Desarrollo" $BLUE
print_message "=========================================" $BLUE

# Funci√≥n para mostrar men√∫
show_menu() {
    echo
    print_message "Selecciona una opci√≥n:" $YELLOW
    echo "1. üöÄ Ejecutar aplicaci√≥n en modo desarrollo"
    echo "2. üß™ Ejecutar tests del sistema"
    echo "3. üì¶ Instalar/actualizar dependencias"
    echo "4. üîÑ Reiniciar base de datos"
    echo "5. üìä Verificar estado del sistema"
    echo "6. üåê Sincronizar con GitHub"
    echo "7. üìù Ver logs de la aplicaci√≥n"
    echo "8. ‚ùå Salir"
    echo
    echo -n "Opci√≥n: "
}

# Funci√≥n para ejecutar la aplicaci√≥n
run_app() {
    print_message "\nüöÄ Iniciando Mi Chas-K en modo desarrollo..." $GREEN
    
    # Verificar si existe archivo .env
    if [ ! -f ".env" ]; then
        print_message "‚ö†Ô∏è  Archivo .env no encontrado. Creando uno b√°sico..." $YELLOW
        cat > .env << EOF
# Configuraci√≥n para desarrollo local
DATABASE_URL=
DB_HOST=localhost
DB_NAME=chaskabd
DB_USER=admin
DB_PASSWORD=
DB_PORT=5432

# Para desarrollo, puedes usar SQLite comentando DATABASE_URL
# y descomentando la siguiente l√≠nea:
# USE_SQLITE=true
EOF
        print_message "‚úÖ Archivo .env creado. Ed√≠talo seg√∫n tu configuraci√≥n." $GREEN
    fi
    
    # Verificar dependencias
    if [ ! -d "venv" ] && [ ! -f "requirements.txt" ]; then
        print_message "‚ùå No se encontraron dependencias instaladas" $RED
        return 1
    fi
    
    # Activar entorno virtual si existe
    if [ -d "venv" ]; then
        source venv/bin/activate
        print_message "‚úÖ Entorno virtual activado" $GREEN
    fi
    
    # Ejecutar aplicaci√≥n
    print_message "üåê Abriendo http://localhost:8501" $BLUE
    streamlit run app.py --server.port 8501 --server.address 0.0.0.0
}

# Funci√≥n para ejecutar tests
run_tests() {
    print_message "\nüß™ Ejecutando tests del sistema..." $GREEN
    
    test_files=("test_db_connection.py" "test_system.py" "test_categorias.py" "test_tickets.py" "test_ventas.py")
    
    for test_file in "${test_files[@]}"; do
        if [ -f "$test_file" ]; then
            print_message "üìã Ejecutando $test_file..." $BLUE
            python "$test_file" || print_message "‚ùå Error en $test_file" $RED
        fi
    done
    
    print_message "‚úÖ Tests completados" $GREEN
}

# Funci√≥n para instalar dependencias
install_deps() {
    print_message "\nüì¶ Instalando/actualizando dependencias..." $GREEN
    
    # Crear entorno virtual si no existe
    if [ ! -d "venv" ]; then
        print_message "üî® Creando entorno virtual..." $BLUE
        python3 -m venv venv
    fi
    
    # Activar entorno virtual
    source venv/bin/activate
    
    # Actualizar pip
    pip install --upgrade pip
    
    # Instalar dependencias
    if [ -f "requirements.txt" ]; then
        pip install -r requirements.txt
        print_message "‚úÖ Dependencias instaladas" $GREEN
    else
        print_message "‚ùå Archivo requirements.txt no encontrado" $RED
    fi
}

# Funci√≥n para reiniciar base de datos
reset_database() {
    print_message "\nüîÑ Reiniciando base de datos..." $YELLOW
    print_message "‚ö†Ô∏è  ADVERTENCIA: Esto eliminar√° todos los datos existentes" $RED
    echo -n "¬øContinuar? (y/N): "
    read -r response
    
    if [[ "$response" =~ ^[Yy]$ ]]; then
        if [ -f "reset_database.py" ]; then
            python reset_database.py
            print_message "‚úÖ Base de datos reiniciada" $GREEN
        else
            print_message "‚ùå Script reset_database.py no encontrado" $RED
        fi
    else
        print_message "‚ùå Operaci√≥n cancelada" $YELLOW
    fi
}

# Funci√≥n para verificar estado del sistema
check_system() {
    print_message "\nüìä Verificando estado del sistema..." $BLUE
    
    # Verificar Python
    if command -v python3 &> /dev/null; then
        python_version=$(python3 --version)
        print_message "‚úÖ Python: $python_version" $GREEN
    else
        print_message "‚ùå Python no encontrado" $RED
    fi
    
    # Verificar entorno virtual
    if [ -d "venv" ]; then
        print_message "‚úÖ Entorno virtual: Disponible" $GREEN
    else
        print_message "‚ö†Ô∏è  Entorno virtual: No encontrado" $YELLOW
    fi
    
    # Verificar archivos principales
    main_files=("app.py" "requirements.txt" "database/" "pages/" "utils/")
    for file in "${main_files[@]}"; do
        if [ -e "$file" ]; then
            print_message "‚úÖ $file: Presente" $GREEN
        else
            print_message "‚ùå $file: Faltante" $RED
        fi
    done
    
    # Verificar conectividad (si hay internet)
    if ping -c 1 google.com &> /dev/null; then
        print_message "‚úÖ Conectividad: OK" $GREEN
    else
        print_message "‚ö†Ô∏è  Conectividad: Sin internet" $YELLOW
    fi
}

# Funci√≥n para ver logs
view_logs() {
    print_message "\nüìù Logs de la aplicaci√≥n..." $BLUE
    
    if [ -f "app.log" ]; then
        tail -50 app.log
    else
        print_message "‚ö†Ô∏è  No se encontraron logs" $YELLOW
    fi
}

# Bucle principal
while true; do
    show_menu
    read -r choice
    
    case $choice in
        1)
            run_app
            ;;
        2)
            run_tests
            ;;
        3)
            install_deps
            ;;
        4)
            reset_database
            ;;
        5)
            check_system
            ;;
        6)
            if [ -f "sync_github.sh" ]; then
                ./sync_github.sh
            else
                print_message "‚ùå Script sync_github.sh no encontrado" $RED
            fi
            ;;
        7)
            view_logs
            ;;
        8)
            print_message "\nüëã ¬°Hasta luego!" $GREEN
            exit 0
            ;;
        *)
            print_message "\n‚ùå Opci√≥n inv√°lida" $RED
            ;;
    esac
    
    print_message "\nPresiona Enter para continuar..." $BLUE
    read -r
done
